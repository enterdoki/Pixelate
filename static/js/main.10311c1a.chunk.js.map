{"version":3,"sources":["components/NavBar/Nav.js","components/Table/TableCell.js","components/Table/TableRow.js","components/Table/Table.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","react_default","a","createElement","className","onClick","this","props","addRow","addColumn","removeRow","removeCol","defaultValue","onChange","changeColor","value","Component","TableCell","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleColor","setState","color","state","onMouseOver","style","backgroundColor","width","height","border","TableRow","rows","i","col","push","Table_TableCell","Table","row","Table_TableRow","column","App","handleAddRow","handleAddColumn","ro","console","log","handleRemoveRow","handleRemoveColumn","event","changeToColor","target","returnColor","Nav","components_Table_Table","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.10311c1a.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport \"./NavBar.css\";\r\n\r\n\r\nclass NavBar extends Component {\r\n    render() {\r\n        return (     \r\n            <div className = \"nav-bar\">\r\n                <button onClick = {this.props.addRow}>Add Row</button>\r\n                <button onClick = {this.props.addColumn}>Add Column</button>\r\n                <button onClick={this.props.removeRow}> Remove Row</button>\r\n                <button onClick={this.props.removeCol}> Remove Column</button>\r\n                <select defaultValue = \"whitesmoke\" onChange = {this.props.changeColor}>\r\n                    <option value=\"red\">Red</option>\r\n                    <option value=\"blue\">Blue</option>\r\n                    <option value=\"black\">Black</option>\r\n                    <option value=\"whitesmoke\">Whitesmoke</option>\r\n                </select>\r\n\r\n            </div>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nexport default NavBar;","import React, {Component} from 'react';\r\n\r\n\r\nclass TableCell extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            color: this.props.color,\r\n            changeColor: this.props.changeColor()\r\n        }\r\n    }\r\n    handleColor = () => {\r\n        this.setState({\r\n            color: this.props.changeColor()\r\n        })\r\n    }\r\n    render(){\r\n        return <td onMouseOver = {this.handleColor} \r\n                style={{backgroundColor: this.state.color,color: this.state.color, width:\"50px\", height:\"50px\", border:\"1px solid black\"}}>\r\n            \r\n                </td>\r\n    }\r\n}\r\n\r\nexport default TableCell;","import React, {Component} from 'react';\r\nimport TableCell from './TableCell';\r\n\r\n\r\nclass TableRow extends Component{\r\n    render(){\r\n        let rows= [];\r\n        for (let i = 0; i < this.props.col; i++){\r\n            rows.push(<TableCell color = {this.props.color} changeColor = {this.props.changeColor}></TableCell>)\r\n        }\r\n        return <tr>\r\n            {rows}\r\n        </tr>\r\n    }\r\n}\r\n\r\nexport default TableRow;","import React, {Component} from 'react';\r\n// import TableElement from \"./TableElement/TableElement\";\r\nimport \"./Table.css\";\r\nimport TableRow from './TableRow';\r\n\r\nclass Table extends Component {\r\n    render () {\r\n        let Table = [];\r\n        for (let i = 0; i < this.props.row; i++){\r\n            Table.push(<TableRow col = {this.props.column} color = {this.props.color} changeColor = {this.props.changeColor}></TableRow >)\r\n        }\r\n        return (\r\n                Table\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Table;","import React , {Component} from 'react';\r\nimport NavBar from './components/NavBar/Nav';\r\nimport Table from './components/Table/Table';\r\nimport './App.css';\r\n\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state= {\r\n        row: 0,\r\n        column: 0,\r\n        color: \"whitesmoke\",\r\n        changeToColor: \"whitesmoke\"\r\n    }  \r\n}\r\n  handleAddRow = () => {\r\n    let col = this.state.column;\r\n    if (col === 0){\r\n      col = 1;\r\n    }\r\n    this.setState({\r\n        row: this.state.row +1,\r\n        column : col \r\n    })\r\n  }\r\n\r\n  handleAddColumn = () => {\r\n    let ro = this.state.row;\r\n    if (ro === 0){\r\n      ro = 1;\r\n    }\r\n    this.setState({\r\n        column: this.state.column +1,\r\n        row : ro\r\n    })\r\n    console.log(this.state.column);\r\n  }\r\n\r\n  handleRemoveRow = () => {\r\n    if(this.state.row === 0) {\r\n      return;\r\n    }\r\n    this.setState ({\r\n      row: this.state.row -1\r\n    })\r\n    \r\n  }\r\n\r\n  handleRemoveColumn = () => {\r\n    if(this.state.column === 0) {\r\n      return;\r\n    }\r\n    this.setState ({\r\n      column: this.state.column -1\r\n    })\r\n    \r\n  }\r\n\r\n  changeColor = event =>{\r\n    this.setState({\r\n        changeToColor : event.target.value\r\n    })\r\n  }\r\n\r\n  returnColor = () =>{\r\n    return this.state.changeToColor;\r\n  }\r\n\r\n  render () {\r\n    return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <h2>Pixelate</h2>\r\n        <NavBar changeColor = {this.changeColor} addRow = {this.handleAddRow} addColumn = {this.handleAddColumn} removeRow = {this.handleRemoveRow} removeCol = {this.handleRemoveColumn}/>\r\n      </header>\r\n      <div className = \"main-table\">\r\n        <Table row = {this.state.row} column = {this.state.column} color = {this.state.color} changeColor = {this.returnColor}/>\r\n      </div>\r\n    </div>\r\n    \r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}